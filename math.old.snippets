priority 1

# Math Context
global !p
texMathZones = ['texMathZone' + x for x in ['A', 'AS', 'B', 'BS', 'C', 'CS', 'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS', 'J', 'JS', 'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z', 'AmsA', 'AmsB', 'AmsC', 'AmsD', 'AmsE', 'AmsF', 'AmsG', 'AmsAS', 'AmsBS', 'AmsCS', 'AmsDS', 'AmsES', 'AmsFS', 'AmsGS' ]]
texIgnoreMathZones = ['texMathText']
texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")
ignore = texIgnoreMathZoneIds[0]
def math():
	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
	try:
		first = next(i for i in reversed(synstackids) if i in texIgnoreMathZoneIds or i in texMathZoneIds)
		return first != ignore
	except StopIteration:
		return False

def math():
	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
	try:
		first = next(
            i for i in reversed(synstackids)
            if i in texIgnoreMathZoneIds or i in texMathZoneIds
        )
		return first != ignore
	except StopIteration:
		return False


endglobal


#     e    e                  d8   888            ,d88~~\   d8              88~\   88~\
#    d8b  d8b       /~~~8e  _d88__ 888-~88e       8888    _d88__ 888  888 _888__ _888__
#   d888bdY88b          88b  888   888  888       `Y88b    888   888  888  888    888
#  / Y88Y Y888b    e88~-888  888   888  888        `Y88b,  888   888  888  888    888
# /   YY   Y888b  C888  888  888   888  888          8888  888   888  888  888    888
#/          Y888b  "88_-888  "88_/ 888  888       \__88P'  "88_/ "88_-888  888    888









context "math()"
snippet 'n(\d)' "auto negative" wrA
-`!p snip.rv = match.group(1)`
endsnippet



#      _/_/_/                            _/                  _/
#   _/        _/    _/  _/_/_/  _/_/    _/_/_/      _/_/    _/    _/_/_/
#    _/_/    _/    _/  _/    _/    _/  _/    _/  _/    _/  _/  _/_/
#       _/  _/    _/  _/    _/    _/  _/    _/  _/    _/  _/      _/_/
#_/_/_/      _/_/_/  _/    _/    _/  _/_/_/      _/_/    _/  _/_/_/
#               _/
#          _/_/
# SYMBOLS


#context "math()"
#snippet &= "equals" iA
#&= $1 ${2: \\\\ }$0
#endsnippet

context "math()"
snippet =a "equals" iA
&$1 $2 ${3: \\\\ }$0
endsnippet










context "math()"
snippet tp "two pi" iA
2\pi$0
endsnippet

context "math()"
snippet pb2 "pi by 2" wA
\frac{\pi}{2}$0
endsnippet

context "math()"
snippet pb3 "pi by 3" wA
\frac{\pi}{3}$0
endsnippet

context "math()"
snippet 2pb3 "2pi by 3" iA
\frac{2\pi}{3}$0
endsnippet



# context "math()"
# snippet fvars "some finite number of variables" iA
# $1_{1}$2 $3 $1_{2}$2 $3 \dots $3 $1_{$5 - 1}$2 $3 $1_{$5}$0
# endsnippet































context "math()"
snippet fai "forall" iA
\forall $1 \in$0
endsnippet


#o                 o         o
#|                 | /       |
#O-o  o-o  oo  o-o OO   o-o -o- o-o
#|  | |   | | |    | \  |-'  |   \
#o-o  o   o-o- o-o o  o o-o  o  o-o
# BRACKETS


context "math()"
# snippet conj "conjugate" iA
# \overline{$1}$0
# endsnippet



#        .                     .
#,-. . . |-. ,-. ,-. ,-. . ,-. |- ,-.
#`-. | | | | `-. |   |   | | | |  `-.
#`-' `-^ ^-' `-' `-' '   ' |-' `' `-'
#                          |
#                          '
# SUBSCRIPTS

#context "math()"
#snippet xnn "xn" iA
#x_{n}$0
#endsnippet


#                       /$$
#                      | $$
#  /$$$$$$$  /$$$$$$  /$$$$$$   /$$$$$$$
# /$$_____/ /$$__  $$|_  $$_/  /$$_____/
#|  $$$$$$ | $$$$$$$$  | $$   |  $$$$$$
# \____  $$| $$_____/  | $$ /$$\____  $$
# /$$$$$$$/|  $$$$$$$  |  $$$$//$$$$$$$/
#|_______/  \_______/   \___/ |_______/
#SETS

context "math()"
snippet afa "afa" iA
\mathbb{A}$0
endsnippet

context "math()"
snippet EU "E" iA
\qathbb{E}$0
endsnippet

context "math()"
snippet R0+ "R0+" iA
\\R_0^+$0
endsnippet

context "math()"
snippet Rp "Real Positive" iA
\mathbb{R^+}$0
endsnippet




# snippet unit "unit vector" iA
# \vec e_{$1}$0
# endsnippet

context "math()"
snippet lll "l" iA
\ell$0
endsnippet


snippet slide "slide" bA
\begin{slide}{$1}
   $0
\end{slide}
endsnippet

snippet '(?<!\\)formule' "formule" rwA
\formule{$1}{$2}$0
endsnippet


#  __      _
# / /_____(_)__ _
#/ __/ __/ / _ `/
#\__/_/ /_/\_, /
#         /___/




snippet '(?<!\\)logo' "logo" rwA
\log$0
endsnippet



context "math()"
snippet r> "right arrow" iA
\rightarrow$0
endsnippet






context "math()"
snippet LL "laplace" iA
\mathcal{L}$0
endsnippet

context "math()"
snippet HH "hamiltonian" iA
\mathcal{H}$0
endsnippet




context "math()"
snippet DD "delta" iA
\Delta$0
endsnippet









context "math()"
snippet bol "bol" i
\left(${1:x} - ${2:\delta}, $1 + $2\right)$0
endsnippet

context "math()"
snippet inwend "mathring" i
\mathring$0
endsnippet




context "math()"
snippet Ff "Captial Function" iA
\mathcal{${1:f}}\left(${2:x}\right)$0
endsnippet


context "math()"
snippet NN "n" iA
\mathbb{N}$0
endsnippet


# TODO Dry this up


context "math()"
snippet RPn "Projective space" iA
\mathbb{R \mathrm P^n}$0
endsnippet


context "math()"
snippet Zp "Z" iA
\mathbb{Z ^ +}$0
endsnippet
context "math()"
# snippet opn "U" iA
# \mathcal U
# endsnippet

context "math()"
snippet bbb "borel" iA
\mathcal B$0
endsnippet

context "math()"
snippet BB "Bezier" iA
B_{${1:i}}^{${2:n}}(${3:t})$0
endsnippet

# snippet NN "Basespline" iA
# N_{${1:i}, ${2:k+1}}(${3:u})$0
# endsnippet

#snippet dd "debohr" wA
#\vec d_{${1:i}}
#endsnippet

context "math()"
snippet l_2n "l2n" iA
\ell^2(\N)$0
endsnippet

context "math()"
snippet perp "perp" iA
\perp$0
endsnippet

context "math()"
snippet <! "normal" iA
\triangleleft$0
endsnippet

context "math()"
snippet <> "hokje" iA
\diamond$0
endsnippet

context "math()"
snippet sts "text subscript" iA
_\text{$1}$0
endsnippet





context "math()"
snippet uur "uur" i
\uur{`date +'%H:%M'`}
endsnippet

context "math()"
snippet drm "drawmatrix" iA
\drawmatrix[$2]{$1}$0
endsnippet


# vim:ft=snippets
