global !p
texMathZones = ['texMathZone' + x for x in ['', 'X', 'XX', 'Env', 'EnvStarred', 'Ensured']]

texIgnoreMathZones = ['texMathTextArg']

texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")

texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")

ignore = texIgnoreMathZoneIds[0]


def math():
  synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
  try:
    first = next(i for i in reversed(synstackids) if i in texIgnoreMathZoneIds or i in texMathZoneIds)
    return first != ignore
  except StopIteration:
    return False
endglobal

# WORDS
extends geometry_words
extends movement_words
extends goemetry_words
extends operator_words
extends logic_words
extends sets_words
extends computer-science-words
extends inequality_words
extends combinatorics_words
extends abstract_algebra_words
extends calculus-words
extends relation_words
extends function_words
extends group_theory_words
extends number_theory_words
extends linear_algebra_words
extends equation_words

# MATH
extends external_programs
extends operators
extends fractions
extends logic_symbols
extends sets
extends constants
extends inequality
extends brackets
extends special_symbols
extends greek_symbols
extends decorations
extends text_markings
extends trigonometry
extends combinatorics
extends tikz
extends math_modes
extends products
extends abstract_algebra
extends summmations
extends snippets
extends mathmatical_conjuctions
extends mathmatical_adjectives
extends mathmatical_nouns
extends mathmatical_verbs
extends generic_symbols
extends calculus
extends function_properties
extends functions
extends sequences
extends tex
extends number_theory
extends number_adjectives
extends environments
extends linear_algebra
extends subscripts
extends font_styling
extends equations_multi_variable

# COMPLETE
extends complete-computer-science
extends complete-complex-numbers
extends complete-proof
extends complete-calculus
extends complete-proof
extends complete-graph-theory
