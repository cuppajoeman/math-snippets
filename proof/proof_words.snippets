global !p
from math_snippet_helpers import *
endglobal


snippet ccrt "concretely" w
concretely $0
endsnippet

snippet induc "induction" w
induction $0
endsnippet

snippet ins "inspection" w
inspection $0
endsnippet

snippet ojv "objective" w
objective $0
endsnippet

snippet aw "as well" w
as well $0
endsnippet

snippet ical "identical" w
identical $0
endsnippet

snippet om "omit" w
omit $0
endsnippet

snippet con "construct(ion)" w
construct${1:ion} $0
endsnippet

snippet arb "arbitrary" w
arbitrary $0
endsnippet

snippet wrt "with respect to" w
with respect to $0
endsnippet

snippet can "canonical" w
canonical $0
endsnippet

snippet sm "same" w
same $0
endsnippet

snippet bal "but also" w
but also $0
endsnippet

snippet und "understand" w
understand $0
endsnippet

snippet sta "statement" w
statement $0
endsnippet

snippet op "operation(s)" w
operation${1:s} $0
endsnippet

snippet perf "perform" w
perform $0
endsnippet

snippet q "question" w
question $0
endsnippet

snippet wri "written" w
written $0
endsnippet

snippet tir "their" w
their $0
endsnippet


snippet dn "do not" w
do not $0
endsnippet

snippet dne "does not exist" w
does not exist $0
endsnippet

snippet wch "which" w
which $0
endsnippet

snippet clr "clearly" w
clearly $0
endsnippet

snippet ver "verified" w
verified $0
endsnippet

snippet hvnt "have not" w
have not $0
endsnippet

snippet smp "simply" w
simply $0
endsnippet

snippet bef "before" w
before $0
endsnippet

snippet cor "correct" w
correct $0
endsnippet

snippet simp "simplify(ing)" w
simplify${1:ing} $0
endsnippet

snippet cpt "compute" w
comput${1:ations} $0
endsnippet

snippet supp "correct" w
suppos${1:ing} $0
endsnippet

snippet nm "namely" w
namely $0
endsnippet

snippet occ "occurs" w
occurs $0
endsnippet

snippet anz "analyze" w
analyze $0
endsnippet

snippet exp "expand" w
expand${1:ing} $0
endsnippet

snippet idn "identity" w
identity $0
endsnippet

snippet resp "respectively" w
respectively $0
endsnippet

snippet disc "discussed" w
discussed $0
endsnippet

snippet desc "describe" w
describe $0
endsnippet

snippet wn "we note" w
${1:w}e note $0
endsnippet

snippet wc "(W/w)e commence" w
${1:w}e commence $0
endsnippet

snippet alt "alternate" w
alternat${1:ively} $0
endsnippet

snippet yld "yield(s)" w
yield${1:s} $0
endsnippet

snippet wy "which yields" w
which yields $0
endsnippet

snippet fst "first" w
first $0
endsnippet

snippet slv "solve" w
solve $0
endsnippet

snippet prev "previously" w
previously $0
endsnippet

snippet sat "satisfy" w
satisfy $0
endsnippet

snippet val "value(s)" w
value${1:s} $0
endsnippet

snippet poss "possible" w
possible $0
endsnippet

snippet fd "find(ing)" w
find${1:ing} $0
endsnippet

snippet giv "given" w
given $0
endsnippet

snippet mvr "moreover" w
${1:m}oreover $0
endsnippet

snippet corr "corresponding" w
corresponding $0
endsnippet

snippet app "appl(ying)" w
appl${1:ying} $0
endsnippet

snippet fac "factor" w
factor $0
endsnippet

snippet dir "direction" w
direction $0
endsnippet

snippet on "only" w
only $0
endsnippet

snippet trv "trivial" w
trivial $0
endsnippet

snippet ntrv "trivial" w
non-trivial $0
endsnippet

snippet invo "invokes" w
invoke${1:s} $0
endsnippet

snippet indu "induce" w
induce${1:s} $0
endsnippet

snippet gen "generate" w
generate $0
endsnippet

snippet unq "unique" w
unique $0
endsnippet

snippet mtd "method" w
method $0
endsnippet

snippet gnt "guarenteed" w
guarenteed $0
endsnippet

snippet elem "elementary" w
elementary $0
endsnippet

snippet prcs "process" w
process $0
endsnippet

snippet pro "procedure" w
procedure $0
endsnippet

snippet eval "eval" w
evalulate $0
endsnippet

snippet equa "equation" w
equation $0
endsnippet

snippet eq "equal" w
equal $0
endsnippet

snippet iden "identity" w
identity $0
endsnippet

snippet lkw "likewise" w
likewise $0
endsnippet

snippet cnt "cannot" w
cannot $0
endsnippet

snippet imp "impossible" w
impossible $0
endsnippet

snippet exc "exceed" w
exceed $0
endsnippet

snippet proc "proceed" w
proceed $0
endsnippet

snippet no "number" w
number $0
endsnippet

snippet cons "consider" w
consider $0
endsnippet

snippet cnst "consists" w
consists $0
endsnippet

snippet ind "indeed" w
indeed $0
endsnippet

snippet rec "recall" w
${1:r}ecall $0
endsnippet

snippet recog "recognize" w
recognize $0
endsnippet

snippet dif "different" w
different $0
endsnippet

snippet orig "original" w
original $0
endsnippet

snippet std "standard" w
standard $0
endsnippet

snippet sim "similar(ly)" w
similar${1:ly} $0
endsnippet

snippet simlt "simultaneously" w
simultaneously $0
endsnippet

snippet rep "represent" w
represent $0
endsnippet

snippet equi "equivalently" w
${1:e}quivalently $0
endsnippet


snippet inv "invert" w
invert${1:ible} $0
endsnippet

snippet obs "observation" w
${1:o}bserv${2:ation} $0
endsnippet

snippet wo "we observe" w
${1:w}e observe $0
endsnippet

snippet conv "convert(s)" w
convert${1:s} $0
endsnippet


snippet prop "propert(ies/y)" w
propert${1:ies} $0
endsnippet

snippet th "that" w
that $0
endsnippet

snippet tn "then" w
then $0
endsnippet

snippet red "reduced" w
reduce${1:d} $0
endsnippet

snippet areq "as required" w
as required. $0
endsnippet

snippet prec "precisely" w
precisely $0
endsnippet

snippet req "require" w
require $0
endsnippet

snippet ti "that is" w
${1:t}hat is $0
endsnippet

snippet wt "what" w
what $0
endsnippet

snippet dt "determine(d)" w
determine${1:d} $0
endsnippet

snippet sn "since" w
since $0
endsnippet

snippet ts "thus" w
thus $0
endsnippet

snippet twh "thus we have" w
thus we have $0
endsnippet

snippet wah "we also have" w
we also have $0
endsnippet

snippet wa "we also" w
we also $0
endsnippet

snippet swk "so we know" w
so we know $0
endsnippet

snippet ws "we say" w
we say $0
endsnippet

snippet swh "so we have" w
so we have $0
endsnippet

snippet aswht "and so we have that" w
and so we have that $0
endsnippet

snippet ww "(W/w)e will" w
${1:w}e will $0
endsnippet

snippet Th "The" w
The $0
endsnippet

snippet ass "assum(e/ing)" w
${1:a}ssum${2:ing} $0
endsnippet

snippet wh "we have" w
${1:w}e have $0
endsnippet

snippet wk "we know" w
${1:w}e know $0
endsnippet

snippet twk "thus we know" w
${1:t}hus we know $0
endsnippet

snippet ho "hold(s)" w
hold${1:s} $0
endsnippet

snippet ia "is a" w
is a $0
endsnippet

snippet ina "is not a" w
is not a $0
endsnippet

snippet Ts "To show" w
To show $0
endsnippet

snippet wts "want to show" w
want to show $0
endsnippet

snippet wws "we will show" w
${1:w}e will show $0
endsnippet

snippet wms "we must show" w
${1:w}e must show $0
endsnippet

snippet whs "we have shown" w
${1:w}e have shown $0
endsnippet

snippet wwn "we will now" w
${1:w}e will now $0
endsnippet

snippet wwp "we will prove" w
${1:w}e will prove $0
endsnippet

snippet ift "it follows that" w
it follows that $0
endsnippet

snippet fol "following" w
follow${1:ing} $0
endsnippet

snippet st "such that" w
such that $0
endsnippet

snippet sot "so that" w
so that $0
endsnippet

snippet sotn "so then" w
so then $0
endsnippet

snippet rc "recall" w
recall $0
endsnippet

snippet bc "because" w
because $0
endsnippet

snippet bcm "become(s)" w
become${1:s} $0
endsnippet

snippet fa "for all" w
for all $0
endsnippet

snippet fe "for example" w
for example $0
endsnippet

snippet fay "for any" w
for any $0
endsnippet

snippet fs "for some" w
for some $0
endsnippet

snippet te "there exists" w
there exists $0
endsnippet

snippet ex "exist" w
exist${1:s} $0
endsnippet

snippet nex "not exist" w
not exist${1:s} $0
endsnippet

snippet twc "(T/t)hus we conclude" w
${1:t}hus we conclude $0
endsnippet

snippet wkt "we know that" w
${1:w}e know that $0
endsnippet

snippet var "variable" w
variable $0
endsnippet

snippet wlog "without loss of generality" w
without loss of generality $0
endsnippet

snippet chg "change" w
change${1:s}
endsnippet

snippet prv "prove" w
${1:p}rove $0
endsnippet

snippet rmk "remark" w
remark $0
endsnippet

snippet eqty "equality" w
equality $0
endsnippet

snippet dis "distinct" w
distinct $0
endsnippet

snippet arv "arrive" w
arrive $0
endsnippet


snippet lat "latter" w
latter $0
endsnippet

snippet rem "remember" w
remember $0
endsnippet

snippet defd "defined" w
defined $0
endsnippet

snippet def "definition" w
definition $0
endsnippet

snippet tog "together" w
together $0
endsnippet

snippet tot "total" w
total $0
endsnippet

snippet parti "particular" w
particular $0
endsnippet

snippet abv "above" w
above $0
endsnippet
